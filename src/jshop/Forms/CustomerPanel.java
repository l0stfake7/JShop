/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jshop.Forms;

import java.awt.Dialog;
import java.awt.Window;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.SwingUtilities;
import jshop.Classes.Customer;
import jshop.Classes.ShopException;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;
import jshop.Classes.Order;
import static javax.swing.JOptionPane.showMessageDialog;
import static javax.swing.JOptionPane.showMessageDialog;

/**
 *
 * @author bartek
 */
public class CustomerPanel extends javax.swing.JPanel /*implements ListModel<Order>*/ {
    
    private CustomerAddPanel customerAddPanel;
    private CustomerChooseActionPanel customerChooseActionPanel;
    
    private int globalIdCounter = 0;//Customers Id    
    
    DefaultListModel<String> listModel = new DefaultListModel<>();

    //collections
    /**
     * products - list
     * customers - list
     * orders - hasmap
     */
    private static Map<Integer, Customer> customerMap;
    
    //po kazdej zmiane odswiezac cala jliste z indeksami, zrobic powiazanie indeks list-obiekt
    private static void addCustomer(Customer cust) {
        customerMap.put(cust.getId(), cust);
    }

    private static Customer getCustomer(int id) throws ShopException {
        if (customerMap.get(id) == null) {
            return null;//or throw new MyException("Not found object with id: " + id);//what is better?
        } else {
            return customerMap.get(id);//// TODO: 26.05.16 add safety search: if id doesn't exists return null or throws exception
        }
    }
    
    private static void removeCustomer(Customer customer) {
        customerMap.remove(customer.getId());
    }

    /**
     * Creates new form MainFramePanel
     */
    public CustomerPanel() {
        initComponents();
        
        customerMap = new HashMap<Integer, Customer>();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ListCustomers = new javax.swing.JList<>();
        ButtonCustomerAction = new javax.swing.JButton();
        SpinnerCustomerId = new javax.swing.JSpinner();
        LabelCustomerId = new javax.swing.JLabel();

        ListCustomers.setModel(listModel);
        ListCustomers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(ListCustomers);

        ButtonCustomerAction.setText("Wybierz akcję");
        ButtonCustomerAction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonCustomerActionMouseClicked(evt);
            }
        });

        SpinnerCustomerId.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        LabelCustomerId.setText("Id:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LabelCustomerId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SpinnerCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(ButtonCustomerAction, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SpinnerCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelCustomerId)
                    .addComponent(ButtonCustomerAction))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonCustomerActionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonCustomerActionMouseClicked
        try {
            customerChooseActionPanel = new CustomerChooseActionPanel();
            JDialog dialog = null;
            //show 
            if (dialog == null) {
                Window win = SwingUtilities.getWindowAncestor(this);
                if (win != null) {
                    dialog = new JDialog(win, "Wybierz akcję",
                            Dialog.ModalityType.APPLICATION_MODAL);
                    dialog.getContentPane().add(customerChooseActionPanel);
                    dialog.pack();
                    dialog.setLocationRelativeTo(null);
                }
            }
            dialog.setVisible(true); // here the modal dialog takes over
            //get clicked button
            if(customerChooseActionPanel.getChooseAction() == 1) {//add                    
                dialog = null;
                customerAddPanel = new CustomerAddPanel();
                if (dialog == null) {            
                    Window win = SwingUtilities.getWindowAncestor(this);
                    if (win != null) {
                        dialog = new JDialog(win, "Dodaj klienta",
                                Dialog.ModalityType.APPLICATION_MODAL);
                        dialog.getContentPane().add(customerAddPanel);
                        dialog.pack();
                        dialog.setLocationRelativeTo(null);
                    }
                }
                dialog.setVisible(true); // here the modal dialog takes over
                //TODO check if datas from form is not null
                //get values from fields by getters      
                Date todayDate = new Date();

                Customer customer = new Customer(globalIdCounter,
                        customerAddPanel.getName(),
                        customerAddPanel.getSurname(),
                        customerAddPanel.getPeselNumber(),
                        customerAddPanel.getGender(),
                        customerAddPanel.getDateBirthDay(),
                        customerAddPanel.getAddress(),
                        customerAddPanel.getEmail(),
                        todayDate,
                        customerAddPanel.getBalance()
                );
                //add to collection
                addCustomer(customer);
                //listCustomerBind.put(customer.getId(), listItemsCounter);

                //add to list
                String sb = customer.getName() + " " + customer.getSurname() + " (id: " + customer.getId() + ")";
                listModel.addElement(sb);
                globalIdCounter++;
            }
            else if(customerChooseActionPanel.getChooseAction() == 2) {//show
                dialog = null;
                if(globalIdCounter != 0) {                            
                    //get id spinner from spinner
                    Customer cust = getCustomer((int) SpinnerCustomerId.getValue());
                    if(cust != null) {
                        String customerBirthDate = new SimpleDateFormat("yyyy-MM-dd").format(cust.getDateOfBirth());
                        String customerInfo = new String(           
                                "Id: " + cust.getId() + 
                                "\nImię: " + cust.getName() + 
                                "\nNazwisko: " + cust.getSurname() +
                                "\nPesel: " + cust.getPeselNumber() +
                                "\nPłeć: " + ((cust.getGender()) ? "Tak" : "Nie") +
                                "\nData urodzin: " + customerBirthDate +
                                "\nAdres: " + cust.getAddress() +
                                "\nAdres email: " + cust.getEmailAddress() +
                                "\nData rejestracji: " + cust.getSurname() +
                                "\nStan konta: " + cust.getBalance()
                    
                        );
                        showMessageDialog(this, customerInfo, "Informacje o kliencie", HEIGHT);
                    }
                    else {
                       showMessageDialog(null, "Nie ma takiego klienta!"); 
                    }                    
                }
                else {
                    showMessageDialog(null, "Brak klientów");
                }
                dialog = null;                    
            }
            else if(customerChooseActionPanel.getChooseAction() == 3 && globalIdCounter != 0) {//edit
                dialog = null;
                if(globalIdCounter != 0) {  
                    Customer cust = getCustomer((int) SpinnerCustomerId.getValue());
                    if(cust != null) {
                        customerAddPanel = new CustomerAddPanel();
                        if (dialog == null) {            
                            Window win = SwingUtilities.getWindowAncestor(this);
                            if (win != null) {
                                dialog = new JDialog(win, "Edytuj klienta",
                                        Dialog.ModalityType.APPLICATION_MODAL);
                                dialog.getContentPane().add(customerAddPanel);
                                dialog.pack();
                                dialog.setLocationRelativeTo(null);
                                
                                //set data
                                customerAddPanel.setName(cust.getName());
                                customerAddPanel.setSurname(cust.getSurname());
                                customerAddPanel.setPeselNumber(cust.getPeselNumber());
                                customerAddPanel.setGender(cust.getGender());
                                customerAddPanel.setDateBirthDay(cust.getDateOfBirth());
                                customerAddPanel.setAddress(cust.getAddress());
                                customerAddPanel.setEmail(cust.getEmailAddress());
                                customerAddPanel.setBalance(cust.getBalance());
                            }
                        }
                        dialog.setVisible(true); // here the modal dialog takes over
                        
                        //save
                        cust.setName(customerAddPanel.getName());
                        cust.setSurname(customerAddPanel.getSurname());
                        cust.setPeselNumber(customerAddPanel.getPeselNumber());
                        cust.setGender(customerAddPanel.getGender());
                        cust.setDateOfBirth(customerAddPanel.getDateBirthDay());
                        cust.setAddress(customerAddPanel.getAddress());
                        cust.setEmailAddress(customerAddPanel.getEmail());
                        cust.setBalance(customerAddPanel.getBalance());
                    }
                    else {
                        showMessageDialog(null, "Brak klientów");
                    }
                }
                else {
                    showMessageDialog(null, "Brak klientów");
                }
                dialog = null; 
            }
            else if(customerChooseActionPanel.getChooseAction() == 4 && globalIdCounter != 0) {//remove
                dialog = null;
                if(globalIdCounter != 0) {  
                    Customer cust = getCustomer((int) SpinnerCustomerId.getValue());
                    if(cust != null) {
                        //remove from collection
                        removeCustomer(cust);
                        //reload list
                        listModel.clear();
                        for(int i = 0; i <= customerMap.size(); i++) {
                            Customer customer = getCustomer(i);
                            if(customer != null) {
                                String sb = customer.getName() + " " + customer.getSurname() + " (id: " + customer.getId() + ")";
                                listModel.addElement(sb);
                            }                            
                        }                      
                    }
                    else {
                        showMessageDialog(null, "Brak klientów");
                    }
                }
                else {
                    showMessageDialog(null, "Brak klientów");
                }
                dialog = null; 
            }
        }
        catch (Exception ex) {
            Logger.getLogger(CustomerPanel.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (ShopException ex) {
            Logger.getLogger(CustomerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }  

    }//GEN-LAST:event_ButtonCustomerActionMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonCustomerAction;
    private javax.swing.JLabel LabelCustomerId;
    private javax.swing.JList<String> ListCustomers;
    private javax.swing.JSpinner SpinnerCustomerId;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
