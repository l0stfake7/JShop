/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jshop.Forms;

import java.awt.Dialog;
import java.awt.Window;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.SwingUtilities;
import jshop.Classes.Product;
import jshop.Classes.ShopException;

/**
 *
 * @author bartek
 */
public class ProductPanel extends javax.swing.JPanel {

    /**
     * @return the productMap
     */
    public static Map<Integer, Product> getProductMap() {
        return productMap;
    }

    private ProductFormPanel productAddPanel;
    private ChooseActionPanel productChooseActionPanel;
    
    private int globalIdCounter = 0;//Product Id    
    
    DefaultListModel<String> listModel = new DefaultListModel<>();

    private static Map<Integer, Product> productMap;
    
    //po kazdej zmiane odswiezac cala jliste z indeksami, zrobic powiazanie indeks list-obiekt
    private static void addProduct(Product product) {
        getProductMap().put(product.getId(), product);
    }

    private static Product getProduct(int id) throws ShopException {
        if (getProductMap().get(id) == null) {
            return null;//or throw new MyException("Not found object with id: " + id);//what is better?
        } else {
            return getProductMap().get(id);//// TODO: 26.05.16 add safety search: if id doesn't exists return null or throws exception
        }
    }
    
    private static void removeProduct(Product product) {
        getProductMap().remove(product.getId());
    }
    /**
     * Creates new form ProductPanel
     */
    public ProductPanel() {
        initComponents();
        productMap = new HashMap<Integer, Product>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ListProducts = new javax.swing.JList<>();
        LabelProductId = new javax.swing.JLabel();
        SpinnerProductId = new javax.swing.JSpinner();
        ButtonProductAction = new javax.swing.JButton();

        ListProducts.setModel(listModel);
        jScrollPane1.setViewportView(ListProducts);

        LabelProductId.setText("Id:");

        SpinnerProductId.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        ButtonProductAction.setText("Wybierz akcję");
        ButtonProductAction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonProductActionMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LabelProductId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SpinnerProductId, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(ButtonProductAction, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelProductId)
                    .addComponent(ButtonProductAction)
                    .addComponent(SpinnerProductId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonProductActionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonProductActionMouseClicked
        try {
            productChooseActionPanel = new ChooseActionPanel();
            JDialog dialog = null;
            //show 
            if (dialog == null) {
                Window win = SwingUtilities.getWindowAncestor(this);
                if (win != null) {
                    dialog = new JDialog(win, "Wybierz akcję",
                            Dialog.ModalityType.APPLICATION_MODAL);
                    dialog.getContentPane().add(productChooseActionPanel);
                    productChooseActionPanel.ButtonAddSetText("Dodaj produkt");
                    productChooseActionPanel.ButtonShowSetText("Zobacz produkt");
                    productChooseActionPanel.ButtonEditSetText("Edytuj produkt");
                    productChooseActionPanel.ButtonRemoveSetText("Usuń produkt");
                    productChooseActionPanel.HideRealizeButton();
                    dialog.pack();
                    dialog.setLocationRelativeTo(null);
                }
            }
            dialog.setVisible(true); // here the modal dialog takes over
            //get clicked button
            if(productChooseActionPanel.getChooseAction() == 1) {//add                    
                dialog = null;
                productAddPanel = new ProductFormPanel();
                if (dialog == null) {            
                    Window win = SwingUtilities.getWindowAncestor(this);
                    if (win != null) {
                        dialog = new JDialog(win, "Dodaj produkt",
                                Dialog.ModalityType.APPLICATION_MODAL);
                        dialog.getContentPane().add(productAddPanel);
                        dialog.pack();
                        dialog.setLocationRelativeTo(null);
                    }
                }
                dialog.setVisible(true); // here the modal dialog takes over
                //TODO check if datas from form is not null
                //get values from fields by getters      
                Date todayDate = new Date();

                Product product = new Product(globalIdCounter,
                        productAddPanel.getType(),
                        productAddPanel.getName(),
                        productAddPanel.getPrice()
                );
                //add to collection
                addProduct(product);
                //listCustomerBind.put(product.getId(), listItemsCounter);

                //add to list
                String productInfo = product.getName() + " [" + product.getType() + "][" + product.getPrice() + "PLN] (id: " + product.getId() + ")";
                listModel.addElement(productInfo);
                globalIdCounter++;
            }
            else if(productChooseActionPanel.getChooseAction() == 2) {//show
                dialog = null;
                if(globalIdCounter != 0) {                            
                    //get id spinner from spinner
                    Product product = getProduct((int) SpinnerProductId.getValue());
                    if(product != null) {
                        
                        String productInfo = new String(           
                                "Id: " + product.getId() + 
                                "\nNazwa: " + product.getName() + 
                                "\nTyp: " + product.getType().toString() +
                                "\nCena: " + product.getPrice()
                    
                        );
                        showMessageDialog(this, productInfo, "Informacje o produkcie", HEIGHT);
                    }
                    else {
                       showMessageDialog(null, "Nie ma takiego produktu!"); 
                    }                    
                }
                else {
                    showMessageDialog(null, "Brak produktów");
                }
                dialog = null;                    
            }
            else if(productChooseActionPanel.getChooseAction() == 3 && globalIdCounter != 0) {//edit
                dialog = null;
                if(globalIdCounter != 0) {  
                    Product product = getProduct((int) SpinnerProductId.getValue());
                    if(product != null) {
                        productAddPanel = new ProductFormPanel();
                        if (dialog == null) {            
                            Window win = SwingUtilities.getWindowAncestor(this);
                            if (win != null) {
                                dialog = new JDialog(win, "Edytuj produkt",
                                        Dialog.ModalityType.APPLICATION_MODAL);
                                dialog.getContentPane().add(productAddPanel);
                                productAddPanel.setButtonText("Edytuj produkt");
                                dialog.pack();
                                dialog.setLocationRelativeTo(null);
                                
                                //set data
                                productAddPanel.setName(product.getName());
                                productAddPanel.setType(product.getType());
                                productAddPanel.setPrice(product.getPrice());
                            }
                        }
                        dialog.setVisible(true); // here the modal dialog takes over
                        
                        //save
                        product.setName(productAddPanel.getName());
                        product.setType(productAddPanel.getType());
                        product.setPrice(productAddPanel.getPrice());
                        
                        listModel.clear();
                        for(int i = 0; i <= getProductMap().size(); i++) {
                            Product tempProduct = getProduct(i);
                            if(tempProduct != null) {
                                String productInfo = product.getName() + " [" + product.getType() + "][" + product.getPrice() + "PLN] (id: " + product.getId() + ")";
                                listModel.addElement(productInfo);
                            }                            
                        }
                    }
                    else {
                        showMessageDialog(null, "Brak produktów");
                    }
                }
                else {
                    showMessageDialog(null, "Brak produktów");
                }
                dialog = null; 
            }
            else if(productChooseActionPanel.getChooseAction() == 4 && globalIdCounter != 0) {//remove
                dialog = null;
                if(globalIdCounter != 0) {  
                    Product product = getProduct((int) SpinnerProductId.getValue());
                    if(product != null) {
                        //remove from collection
                        removeProduct(product);
                        //reload list
                                listModel.clear();
                                for(int i = 0; i <= getProductMap().size(); i++) {
                                    Product tempProduct = getProduct(i);
                                    if(tempProduct != null) {
                                        String sb = tempProduct.getName() + " [" + tempProduct.getType() + "] (id: " + tempProduct.getId() + ")";
                                        listModel.addElement(sb);
                                    }                            
                                }
                    }
                    else {
                        showMessageDialog(null, "Brak produktów");
                    }
                }
                else {
                    showMessageDialog(null, "Brak produktów");
                }
                dialog = null; 
            }
        }
        catch (Exception ex) {
            Logger.getLogger(CustomerPanel.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (ShopException ex) {
            Logger.getLogger(CustomerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonProductActionMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonProductAction;
    private javax.swing.JLabel LabelProductId;
    private javax.swing.JList<String> ListProducts;
    private javax.swing.JSpinner SpinnerProductId;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
